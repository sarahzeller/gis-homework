---
author: Sarah Zeller, Felix Werner
title: Homework assignment 1
subtitle: Predicting mobile coverage years in Tanzania
format:
  pdf:
    toc: true
    mainfont: "Open Sans"
    include-in-header: 
      - text: |
          % f√ºr Alignment bei Kommastelle
          \usepackage{booktabs}
          \usepackage{siunitx}
          % alle Tabellen kleiner setzen
          \usepackage{etoolbox}
          \AtBeginEnvironment{longtable}{\footnotesize}
          \AtBeginEnvironment{tabular}{\footnotesize}
          \sisetup{group-separator       = {,}, % default: \, ("thinspace")
                  group-minimum-digits  = 3,   % default: 5
                  input-decimal-markers = {.}} % default: "{.,}"
execute:
  warning: false
  echo: false
bibliography: references.bib
editor: 
  markdown: 
    wrap: sentence
---

{{< pagebreak >}}

In this report, we're having a look at cell phone towers in Tanzania, and estimate when they are built.

```{r}
#| label: install-packages

install.packages("renv")
renv::hydrate()
install.packages("remotes")
remotes::install_github("ropensci/rnaturalearthhires")
```

```{r}
#| label: load-packages
library(here)
library(archive)
library(sf)
library(mapview)
library(ggtext)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthhires)
library(osmdata)
library(nngeo)
library(modelsummary)
library(kableExtra)
library(labelled)
library(fixest)

library(showtext)
font_add_google("Open Sans")
showtext_auto()


here("run_regressions.R") |> source()
here("show_regressions.R") |> source()
st_erase <- function(x, y) st_difference(x, st_union(st_combine(y)))

crs_africa <- "ESRI:102022"
```

```{r}
#| label: check-for-output-folder
if (!"output" %in% (here() |> list.files())) {
  here("output") |> dir.create()
}
```

# Project region

Before diving into the details, let's have a look at the region we are talking about.
@fig-locator-map shows where in the world our country of interest lies, while @fig-basemap shows some political details.
Tanzania lies in Eastern Africa, with its coast towards the Indian Ocean.
It is divided into 30 states.
Most importantly, we can see Tanzania's borders and the coast line.
We will include both in the later regression analysis.
Possibly, countries decide to build cell phone towers further away from the border because neighboring countries may already provide the infrastructure.
Close to the coastline, it is also possible that the terrain is more even or that other infrastructure is already laid out; this may make it easier to build cell phone towers.
Also, tourism may be more important close to the coast, which may drive an early pressure to build cell phone towers.

```{r}
#| label: load-tanzania

tanzania_whole <- ne_countries(country = "United Republic of Tanzania",
                               scale = 10,
                               returnclass = "sf") |> 
  st_transform(crs = crs_africa)

tanzania <- ne_states(country = "United Republic of Tanzania",
                      returnclass = "sf") |> 
  st_transform(crs = crs_africa)

coast <- tanzania_whole |> 
  st_transform(crs = 4326) |> 
  st_buffer(10) |> 
  st_intersection(ne_coastline(scale = 10,
                               returnclass = "sf")) |> 
    st_transform(crs = crs_africa)

islands <- tanzania_whole |> 
  st_cast('MULTILINESTRING') |> 
  st_cast('LINESTRING', do_split = TRUE) %>%
  `[`(2:7,) # select islands

borders <- tanzania_whole |> 
  st_cast('MULTILINESTRING') |> 
  st_cast('LINESTRING', do_split = TRUE) %>%
  `[`(1,) |> # select mainland
  st_erase(coast |> st_buffer(1)) # buffer slightly to create overlap

```

```{r}
#| label: fig-locator-map
#| fig-cap: Research area is located in Tanzania.

world <- ne_countries(scale = "small",
                      returnclass = "sf") |> 
  st_cast('MULTILINESTRING') |> 
  st_cast('LINESTRING', do_split = TRUE) |> 
  mutate(npts = npts(geometry, by_feature = TRUE)) |> 
  st_cast('POLYGON')

ggplot() +
  geom_sf(data = world,
          aes(fill = sovereignt == "United Republic of Tanzania")) +
  scale_fill_manual(values = c("grey90",
                               "#1EB53A")) +
  guides(fill = FALSE) +
  coord_sf(crs = "+proj=ortho +lat_0=5 +lon_0=-10") +
  labs(caption = "Data: Natural Earth") +
  theme_void() +
  theme(text = element_text(family = "Open Sans"))

```

```{r}
#| label: fig-basemap
#| fig-cap: Political map of Tanzania

africa <- ne_countries(continent = "africa",
                       scale = 10,
                       returnclass = "sf") |> 
  st_transform(crs = crs_africa)

bounds <- tanzania_whole |> 
  st_buffer(100000) |> 
  st_bbox()

basemap <- 
  ggplot() +
  geom_sf(data = africa,
          fill = "grey90",
          col = "grey80") +
  geom_sf(data = tanzania,
          fill = "white",
          col = "grey70") +
  coord_sf(xlim = c(bounds$xlim, bounds$xmax),
           ylim = c(bounds$ylim, bounds$ymax),
           crs = crs_africa) +
  annotate("text",
           label = "Indian \nOcean",
           x = 1650000,
           y = -1100000,
           size = 2.5,
           lineheight = .75,
           colour = "grey40") +
  theme_void() +
  theme(panel.background = element_rect(fill = alpha("cornflowerblue", .4),
                                        colour = NA),
        text = element_text(family = "Open Sans")) +
  labs(caption = "Data: Natural Earth")

basemap
```

# Data

## Antennas in Tanzania

Our focus in this report is on cell phone antennas in Tanzania.
Therefore, let's have a look at where cell phone towers were built until end of 2022.
We only consider on antennas that fall within the boundaries of one of Tanzania's states.
Data come from Open Cell ID. @fig-map-cellid shows when antennas were built for three different technologies:

-   GSM (aka 2G)
-   UMTS (aka 3G)
-   LTE (aka 4G)

We can see that LTE antennas only started being built recently.
The islands appear to be rather newly connected as well.
Also, the pattern of both GSM and UMTS antennas indicates a line along which many of them were built; this may be a road or similar infrastructure.
Large areas of land in the West and South East are not covered by any antennas so far.

```{r}
#| label: load-cellid
here("input/opencellid_tanzania.RData") |> load()

open_cell <- opencellid_tanzania |> 
  # convert to sf and project to Africa equal area projection
  st_as_sf(coords = c("lon", "lat"),
           crs = 4326) |> 
  st_transform(crs = crs_africa) |> 
  filter(created_year <= 2022) |> # complete years
  mutate(across(c(created, updated), as_datetime)) |> 
  mutate(created_year = year(created) |> as.integer(),
         create_month = month(created)) |> 
  # order 2G/3G/4G
  mutate(radio = factor(radio, 
                        levels = c("GSM", "UMTS", "LTE"), 
                        ordered = TRUE))|> 
  # add state and subset for only antennas within known states
  st_intersection(tanzania |> transmute(state = name)) 


```

```{r}
#| label: fig-map-cellid
#| fig-cap: Cell phone towers in Tanzania

basemap + 
  geom_sf(data = open_cell |> st_jitter(), 
          aes(col = created_year),
          size = .1) +
  facet_wrap(~radio) +
  # have to set this again after facet_wrap
  coord_sf(xlim = c(bounds$xlim, bounds$xmax),
           ylim = c(bounds$ylim, bounds$ymax)) +
  labs(caption = "Data: OpencellID",
       col = "Construction year") +
  theme(legend.position = "bottom",
        legend.key.width = unit(1, "cm"),
        legend.margin = margin(t = 1),
        text = element_text(family = "Open Sans"))
```

## Road data

In @fig-map-cellid, we could discern some patterns that seemed like roads or railways.
We therefore have a look at road and railway data.
However, we focus on roads that are paved.
This is because it seems likely that more robust infrastructure is needed to install the necessary cables to connect antennas to the internet.
We expect paved roads to be centrally planned by government, with thoughts to such developments, where it should be easier to install cables.
Road data are from GRIP: global roads database.

@fig-map-roads shows the paved road network in Tanzania.
There is a dense spot on the Northern coast: Dar es Salaam, the most populous city.
Besides that, there are some regional clusters where more roads are paved, and some longer roads connect the whole country.
The same pattern as with the antennas appears: in the West and South East, the road network is less dense.
It is also noticeable that a lot of roads lead to borders.
For the islands, on the other hand, there are at least no data on paved roads.

```{r}
#| label: download-data-roads
if (!"roads.zip" %in% (here("output") |> list.files())) {
  # reset timeout for download to longer time
  old_timeout <- getOption('timeout')
  options(timeout = 200)
  # download
  download.file("https://dataportaal.pbl.nl/downloads/GRIP4/GRIP4_Region3_vector_shp.zip",
                here("output/roads.zip"))
  # set back to before
  options(timeout = old_timeout)
  # extract
  archive_extract(here("output/roads.zip"),
                  "output/roads/")
}

```

```{r}
#| label: load-roads

roads <- here("output/roads/GRIP4_region3.shp") |> 
  read_sf() |> 
  # pre-filter for Southern Africa
  filter(GP_RRG == 10) |> 
  st_transform(crs = crs_africa) |> 
  # make sure it's limited to Tanzania
  st_intersection(tanzania_whole)

paved_roads <- roads |> 
  # filter for paved roads
  mutate(GP_RSE == 1) 

```

```{r}
#| label: fig-map-roads
#| fig-cap: Paved roads in Tanzania
basemap +
  geom_sf(data = paved_roads) +
    coord_sf(xlim = c(bounds$xlim, bounds$xmax),
           ylim = c(bounds$ylim, bounds$ymax)) +
  labs(caption = "Data: Global Road Inventory Project") +
  theme(text = element_text(family = "Open Sans"))
```

## Train data

After having a look at the road network, we examine a more historical network: the railways.
These date back to the late 19th century and cover less ground than the road network.
Train data are from Humanitarian OpenStreetMap Team.
@fig-map-trains shows the railroad network.
It connects the West with the coast; all lines end in on point, probably Dar es Salaam with its harbour.

```{r}
if(!"trains.zip" %in% (here("output") |> list.files())) {
  # download
  download.file("https://export.hotosm.org/downloads/c5cc333b-1bfa-4621-b521-273206860c0b/hotosm_tza_railways_lines_shp.zip",
                here("output/trains.zip"))
  # extract
  archive_extract(here("output/trains.zip"),
                  "output/trains/")
}
```

```{r}
#| label: load-trains
trains <- here("output/trains/hotosm_tza_railways_lines.shp") |> 
  read_sf() |> 
  st_transform(crs = crs_africa)
```

```{r}
#| label: fig-map-trains
#| fig-cap: Railroads

basemap + 
  geom_sf(data = trains) +
  coord_sf(xlim = c(bounds$xlim, bounds$xmax),
           ylim = c(bounds$ylim, bounds$ymax)) +
  labs(caption = "Data: Open Street Maps") +
  theme(text = element_text(family = "Open Sans"))
```

## City data

Additionally to infrastructure, population is important.
Where there are people, there is an increased need for cell phone reception.
While there are also applications for agriculture, it would seem more urgent to prioritize more voters during the first roll-out.
@fig-map-cities shows cities in Tanzania; data come from the `maps` package in R.
A similar pattern as before emerges: the West and South East are not as densely populated.
While Dodoma is the capital, it only has a quarter of the population of the largest Tanzanian city, Dar es Salaam.
It may thus be prudent to include both cities in the analysis.

```{r}
#| label: load-cities

library(maps)
data("world.cities")

cities <- world.cities |> 
  filter(country.etc == "Tanzania") |> 
  # set capital as boolean
  mutate(capital = capital == 1,
         size = case_when(pop > 2e6 ~ "> 2 million",
                          pop > 1e5 & pop < 2e6 ~ "> 100,000",
                          pop <= 1e5 ~ "< 100,000")) |> 
  st_as_sf(coords = c("long", "lat"),
           crs = 4326) |> 
  st_transform(crs = crs_africa)
```

```{r}
#| label: fig-map-cities
#| fig-cap: Cities in Tanzania

basemap + 
  geom_sf(data = cities,
          aes(size = size,
              col = capital | name == "Dar es Salaam"),
          alpha = .5) +
  coord_sf(xlim = c(bounds$xlim, bounds$xmax),
           ylim = c(bounds$ylim, bounds$ymax)) +
  scale_colour_manual(values = c("grey40",
                                 "darkred")) +
  annotate("text",
           label = c("Dodoma",
                   "Dar es \nSalaam"),
           col = "darkred",
           size = 2.5,
           lineheight = 1,
           x = c(1130000,
                 1585350),
           y = c(-700000,
                 -700799)) +
  guides(col = FALSE) +
  labs(caption = "Data: {maps} library",
         size = "Population") +
  theme(text = element_text(family = "Open Sans"))

```

## Point of worship

Points of worship are any infrastructure where people worship -- e.g. mosques or churches.
For the point of worship, I use data from OSM.
I download it through the `osmdata` R package [@osmdata].
While I use Tanzania's bounding box to download data, I later intersect it with Tanzania's shape to only retain points of worship within the country borders.
The dataset provides point, line and polygon features.
I only use point features, since these are the most frequent.

```{r}
#| label: load-pofw
pofw <- 
  getbb("Tanzania", featuretype = "country") |> 
  opq(timeout = 100) |> 
  add_osm_feature(key = "amenity",
                  value = "place_of_worship") |> 
  osmdata_sf() %>%
  # filter out point layer
  `[[`(4) |> 
  # intersect with tanzania to only get Tanzanian pofw
  st_transform(crs = crs_africa) |> 
  st_intersection(tanzania_whole)
```

```{r}
#| label: fig-pofw
#| fig-cap: Points of worship

basemap +
  geom_sf(data = pofw,
          alpha = .5) +
  coord_sf(xlim = c(bounds$xlim, bounds$xmax),
           ylim = c(bounds$ylim, bounds$ymax),
           crs = crs_africa) +
  labs(caption = "Data: Open Street Maps")

```

@fig-pofw shows the points of worship within Tanzania.
Little surprisingly, a similar image as with the other variables emerges: the points of worship are in the same areas as cities, i.e. where people live.
However, these data are more detailed and may show city centers, or areas where there is still room for building new infrastructure.
They also show areas where the local population has enough income to build points of worship.

## Calculating distances

Now that we have described all variables, we calculate the distance from cell phone towers to the (nearest)

-   road
-   railway
-   coast
-   border
-   capital.

To calculate the distances correctly, we first project the geometries to the *WGS 1984 Albers for Africa* equal area projection (ESRI:102022).
Then, we use the `nngeo` [@nngeo] package, and its function `st_nn`.
For each cell phone tower, it calculates the distance to the nearest neighbour.
Instead of receiving a matrix, we simply get a list with two vectors.
The first vector includes the index for the nearest neighbour for each cell phone tower.
The second vector includes the distance to this nearest neighbour.
We do this for each variable of interest.
When merging those distances with the Open Cell ID data, we transform them into kilometers.

Additionally, we determine whether a cell phone tower is on an island.
In this case, we still determine the distance to the coast; but we set the distance to the border to the mean value of the mainland distances.
This is because we do not have the precise outline of the border in the ocean.
We consequently add an island dummy to the analysis.

```{r}
#| label: calculate-dist-road

# calculate distance to nearest neighbor road
if (here("output/nn_paved_roads.rds") |> file.exists()) {
  nn_paved_roads <- readRDS("output/nn_paved_roads.rds")
} else {
  nn_paved_roads <- st_nn(open_cell,
                          paved_roads,
                          returnDist = TRUE)
  saveRDS(nn_paved_roads,
          "output/nn_paved_roads.rds")

}
# extract distances
dists_roads <- sapply(nn_paved_roads[[2]], "[", 1)
```

```{r}
#| label: calculate-dist-train

# calculate distance to nearest neighbor railway
if (here("output/nn_trains.rds") |> file.exists()) {
  nn_trains <- readRDS("output/nn_trains.rds")
} else {
  nn_trains <- st_nn(open_cell,
                          trains,
                          returnDist = TRUE)
  saveRDS(nn_trains,
          "output/nn_trains.rds")

}
# extract distances
dists_trains <- sapply(nn_trains[[2]], "[", 1)
```

```{r}
#| label: calculate-dist-coast

# calculate distance to coast
if (here("output/nn_coast.rds") |> file.exists()) {
  nn_coast <- readRDS("output/nn_coast.rds")
} else {
  nn_coast <- st_nn(open_cell,
                          coast,
                          returnDist = TRUE)
  saveRDS(nn_coast,
          "output/nn_coast.rds")
}
# extract distances
dists_coast <- sapply(nn_coast[[2]], "[", 1)

```

```{r}
#| label: calculate-distance-borders

# calculate distance to border
if (here("output/nn_border.rds") |> file.exists()) {
  nn_border <- readRDS("output/nn_border.rds")
} else {
  nn_border <- st_nn(open_cell,
                     tanzania_whole,
                     returnDist = TRUE)
  saveRDS(nn_border,
          "output/nn_border.rds")
}
# extract distances
dists_border <- sapply(nn_border[[2]], "[", 1)
```

```{r}
#| label: check-if-on-island

if (here("output/on_island.rds") |> file.exists()) {
  on_island <- readRDS("output/on_island.rds")
} else {
  on_island <- st_intersects(open_cell,
                             islands |> st_buffer(10000))
  saveRDS(on_island,
          "output/on_island.rds")
}
# extract distances
is_on_island <- on_island %>% lengths > 0

```

```{r}
#| label: calculate-distance-capital

# calculate distance to capital
if (here("output/nn_capital.rds") |> file.exists()) {
  nn_capital <- readRDS("output/nn_capital.rds")
} else {
  nn_capital <- st_nn(open_cell,
                      # Dodoma location
                      cities |> filter(name == "Dodoma"),
                      returnDist = TRUE)
  saveRDS(nn_capital,
          "output/nn_capital.rds")
}
# extract distances
dists_capital <- sapply(nn_capital[[2]], "[", 1)

```

```{r}
#| label: calculate-distance-pofw

# calculate distance to nearest neighbor road
if (here("output/nn_pofw.rds") |> file.exists()) {
  nn_pofw <- readRDS("output/nn_pofw.rds")
} else {
  nn_pofw <- st_nn(open_cell,
                   pofw,
                   returnDist = TRUE)
  saveRDS(nn_pofw,
          "output/nn_pofw.rds")
}
# extract distances
dists_pofw <- sapply(nn_pofw[[2]], "[", 1)

```


```{r}
#| label: merge-dist-w-opencell
# merge into open_cell data frame
open_cell_w_distances <- open_cell |> 
  mutate(state_id = state |> as.factor() |> as.integer()) |> 
  mutate(state = labelled(state, 
                          label = "State")) |> 
  mutate(dist_road_km = labelled(dists_roads / 1000, 
                                 label = "Distance to road (km)"),
         dist_train_km = labelled(dists_trains / 1000, 
                                  label = "Distance to railway (km)"),
         dist_border_km = labelled(dists_coast / 1000, 
                                   label = "Distance to border (km)"),
         dist_coast_km = labelled(dists_coast / 1000, 
                                  label = "Distance to coast (km)"),
         on_island = labelled(is_on_island |> as.integer(),
                              label = "Island position"),
         dist_capital_km = labelled(dists_capital / 1000, 
                                    label = "Distance to capital (km)"),
         dist_pofw_km = labelled(dists_pofw / 1000,
                                 label = "Distance to point \nof worship (km)")) |> 
  # account for islands
  mutate(dist_border_km = ifelse(is_on_island, NA, dist_border_km)) 

fill_value <- open_cell_w_distances$dist_border_km |> mean(na.rm = TRUE)

open_cell_w_distances <- open_cell_w_distances |>
  mutate(dist_border_km = ifelse(is_on_island, fill_value, dist_border_km) |> 
           labelled(label = "Distance to border (km)"))

saveRDS(open_cell_w_distances,
        here("output/open_cell_w_distances.rds"))
```

```{r}
#| label: tbl-summary-vars
#| tbl-cap: Distance summaries

selected_cols <- c("dist_road_km",
                   "dist_train_km",
                   "dist_border_km",
                   "dist_coast_km",
                   "dist_capital_km",
                   "dist_pofw_km",
                   "on_island")

# prepare histogram sparklines
tmp_list <- open_cell_w_distances |> 
  select(all_of(selected_cols)) |>
  as.data.frame() |> 
  select(-geometry) |> 
  lapply(na.omit) |> 
  lapply(scale)

# formatting things
emptycol <- function(x) " "
f <- function(x) format(round(x, 2), big.mark=",")
# formula
formula_summary <- paste(
  paste(paste0(selected_cols), collapse = "+"), 
  '~ N + Mean + SD + Median + Min + Max + Heading("Histogram") * emptycol')

datasummary(formula = as.formula(formula_summary),
            data = open_cell_w_distances,
            format = f,
            output = "data.frame") |> 
  kbl(booktabs = TRUE,
      align = c("l", rep("r", 6), "c")) |> 
  column_spec(column = 8, image = spec_hist(tmp_list))

```

# Regression results

In the next step, we want to analyze what determines the timing of antenna construction.
We do this separately for each technology: GSM, UMTS and LTE.
We use the `fixest` package [@fixest] to run regressions with the amassed data set.
We then use the `modelsummary` [@modelsummary] package to show the regression output.

We run the following specifications:

(1) baseline OLS
(2) OLS with fixed effects (FE-OLS) on state-level
(3) FE-OLS with state-level clustered standard errors
(4) FE-OLS with heteroskedasticity-robust standard errors (White correction)
(5) FE-OLS with Conley standard errors

## GSM

```{r}
#| label: run-regressions

formula <- reformulate(open_cell_w_distances |>
                         as.data.frame() |>  # take out geometry
                         select(starts_with(c("dist_","on_"))) |> # select all distances
                         names(),
                       "created_year")


gsm_list <- open_cell_w_distances |> 
  filter(radio == "GSM") |> 
  run_regressions(formula = formula)

umts_list <- open_cell_w_distances |> 
  filter(radio == "UMTS") |> 
  run_regressions(formula = formula)

lte_list <- open_cell_w_distances |> 
  filter(radio == "LTE") |> 
  run_regressions(formula = formula)

```

```{r}
#| label: tbl-summary-gsm
#| tbl-cap: Determinants of building a GSM antenna

show_regressions(gsm_list)

```

## UMTS

```{r}
#| label: tbl-summary-umts
#| tbl-cap: Determinants of building a UMTS antenna

show_regressions(umts_list)

```

## LTE

```{r}
#| label: tbl-summary-lte
#| tbl-cap: Determinants of building a LTE antenna

show_regressions(lte_list)

```

# Conclusion

{{< pagebreak >}}

# References {.unnumbered}

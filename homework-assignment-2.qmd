---
author: Sarah Zeller
title: Homework assignment 2
subtitle: Predicting building antennas in Tanzania
format:
  html: 
    toc: true
    mainfont: "Open Sans"
  pdf:
    toc: true
    number-sections: true
    include-in-header: 
      - text: |
          % f√ºr Alignment bei Kommastelle
          \usepackage{booktabs}
          \usepackage{siunitx}
          % alle Tabellen kleiner setzen
          \usepackage{etoolbox}
          \AtBeginEnvironment{longtable}{\footnotesize}
          \AtBeginEnvironment{tabular}{\footnotesize}
          \sisetup{group-separator       = {,}, % default: \, ("thinspace")
                  group-minimum-digits  = 3,   % default: 5
                  input-decimal-markers = {.}} % default: "{.,}"
execute:
  warning: false
  echo: false
bibliography: references.bib
editor: 
  markdown: 
    wrap: sentence
---

{{< pagebreak >}}

In this report, I'm having a look at cell phone towers in Tanzania, and estimate the probability of them being built in a certain area.
I first describe the region and variables.
I then show my regression and discuss them.

```{r}
#| label: install-packages
#| echo: false
#| output: false
#| warning: false
#| eval: false

if (!require("remotes")) install.packages("remotes", quiet = TRUE)
if (!require("rnaturalearthhires")) {
  remotes::install_github("ropensci/rnaturalearthhires")
} 
if (!require("renv")) install.packages("renv", quiet = TRUE)
renv::hydrate()
```

```{r}
#| label: load-packages
library(here)
library(archive)
library(sf)
library(mapview)
library(ggtext)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthhires)
library(osmdata)
library(nngeo)
library(modelsummary)
library(kableExtra)
library(labelled)
library(fixest)
library(stars)
library(raster)
library(dplyr)

library(showtext)
font_add_google("Open Sans")
showtext_auto()


here("run_regressions_hw-2.R") |> source()
here("show_regressions_hw-2.R") |> source()

```

```{r}
#| label: check-for-output-folder
if (!"output" %in% (here() |> list.files())) {
  here("output") |> dir.create()
}
```

# Project region

Before diving into the details, let's have a look at the region I am talking about.
@fig-locator-map shows where in the world our country of interest lies, while @fig-basemap shows some political details.
Tanzania lies in Eastern Africa, with its coast towards the Indian Ocean.
It is divided into 30 states.

```{r}
#| label: load-tanzania

tanzania_whole <- ne_countries(country = "United Republic of Tanzania",
                               scale = 10,
                               returnclass = "sf") 

tanzania <- ne_states(country = "United Republic of Tanzania",
                      returnclass = "sf") 

# write shape file and zip it
if (!("tanzania" %in% (here("output") |> list.files()))) {
  here("output/tanzania") |> dir.create()
  st_write(tanzania |> dplyr::select(name, geometry),
           here("output/tanzania/tanzania.shp")) |> try()
  
  zip(here("output/tanzania.zip"),
      here("output/tanzania"))
}

tanzania_vect <- here("output/tanzania/tanzania.shp") |> terra::vect()

```

```{r}
#| label: fig-locator-map
#| fig-cap: Research area is located in Tanzania.

world <- ne_countries(scale = "small",
                      returnclass = "sf") |> 
  st_cast('MULTILINESTRING') |> 
  st_cast('LINESTRING', do_split = TRUE) |> 
  mutate(npts = npts(geometry, by_feature = TRUE)) |> 
  st_cast('POLYGON')

ggplot() +
  geom_sf(data = world,
          aes(fill = sovereignt == "United Republic of Tanzania")) +
  scale_fill_manual(values = c("grey90",
                               "#1EB53A")) +
  guides(fill = FALSE) +
  coord_sf(crs = "+proj=ortho +lat_0=5 +lon_0=-10") +
  labs(caption = "Data: Natural Earth") +
  theme_void() +
  theme(text = element_text(family = "Open Sans"))

```

```{r}
#| label: fig-basemap
#| fig-cap: Political map of Tanzania

bounds <- st_bbox(tanzania_whole |> st_transform("ESRI:102022") |> st_buffer(100000))

africa <- ne_countries(continent = "africa",
                       scale = 10,
                       returnclass = "sf") |> 
  st_transform("ESRI:102022") |> 
  st_crop(bounds) |> 
  st_transform(4326)

basemap <- 
  ggplot() +
  geom_sf(data = africa,
          fill = "grey90",
          col = "grey80") +
  scale_x_continuous(expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  geom_sf(data = tanzania,
          fill = "white",
          col = "grey70") +
  annotate("text",
           label = "Indian \nOcean",
           x = 40.5,
           y = -7,
           size = 3,
           lineheight = .75,
           colour = "grey40") +
  theme_void() +
  theme(panel.background = element_rect(fill = alpha("cornflowerblue", .4),
                                        colour = NA),
        plot.margin = margin(-10,0,0,0),
        text = element_text(family = "Open Sans")) +
  labs(caption = "Data: Natural Earth")

basemap
```

# Data sources

In this section, I describe the data, including their sources, for both independent and dependent variables.
I show how I derive the variables I later use in the regression.

## Nighttime lights

I access nighttime lights from the file uploaded in OPAL.
It shows the light intensity for each grid cell during night.
The grid cells are approximately 1 $km^2$.

```{r}
#| label: load-nightlights

if (! "nightlights_sf.rds" %in% (here("output") |> list.files())) {
  nightlights <- here("input/DN_NTL_2021.tif") |>
    raster::raster() |>
    crop(tanzania_whole) |>
    mask(tanzania_whole)
  
  nightlights_sf <- nightlights |>
    # as('SpatialPolygonsDataFrame') |> 
    rasterToPolygons(dissolve = FALSE, na.rm = TRUE) |> 
    st_as_sf()
  
  saveRDS(nightlights_sf,
          here("output/nightlights_sf.rds"))
  st_write(nightlights_sf,
           here("output/nightlights_sf.shp")) |> try()
} else {
  nightlights_sf <- here("output/nightlights_sf.rds") |> readRDS()
}

nightlights_terra <- here("input/DN_NTL_2021.tif") |> 
  terra::rast() |> 
  # crop to extent
  crop(tanzania_whole) |> 
  # clip exact borders
  mask(tanzania_whole)

nightlights_vect <- here("output/nightlights_sf.shp") |> terra::vect()

```

I use this grid cell as the baseline and aggregate all other variables on this level.
For this, I transform the raster data to a `sf` object, and then calculate zonal statistics for each of the grid cells.
This leads to a huge data set, since I have `r nrow(nightlights_sf) |> format(big.mark = ",")` grid cells. However, I chose to go with such a detailed data set so that calculating the probability of any antenna within this grid cell makes some sense; if the grid cells are too large, we'd have to go for the number of antennas.

In @fig-nightlights-zonal, I plot the data.
I first show them aggregated on the state level: here, we can see that there are only to states with high light intensity, and a couple of rather dark ones, while the rest is in between.
When disaggregating them to the grid level, we can see that the picture is actually more nuanced: there are some large cities which are really bright, a lot of areas with at least some lights, and other areas which are pitch-black.
We would expect the antennas to be built where more people are, since more people can then use the new infrastructure.
Thus, we'd expect a positive correlation between this variable and the number or probability of an antenna within a grid cell.

```{r}
#| label: fig-nightlights-zonal
#| layout-ncol: 2
#| fig-cap: Nightlights
#| fig-subcap:
#|   - per state
#|   - per grid cell

nightlights_zonal <- zonal(nightlights_terra, tanzania_vect, fun = "mean", na.rm = TRUE) |> 
  cbind(tanzania |> dplyr::select(name)) |> 
  st_as_sf()

basemap + 
  geom_sf(data = nightlights_zonal,
          aes(fill = log(DN_NTL_2021))) +
  labs(fill = "Log night time lights")

basemap +
  geom_raster(data = nightlights_terra |> as.data.frame(xy = TRUE),
              aes(x = x,
                  y = y,
                  fill = DN_NTL_2021))

```

## Mobile antennas

The presence of a mobile antenna is what we want to predict.
I remove all observations after 2022, since the data for 2023 are not complete yet.
I then split the data into three data sets:

-   2G (GSM technology)
-   3G (UMTS technology)
-   4G (LTE technology)

This is because each technology goes with a different phase of installing the infrastructure.
While 2G was the earliest infrastructure and thus shows where early priorities lie, 4G is the most advanced and can show where current technology hotspots are.
Also, administrations may have changed, with different foci on which parts of the country to connect.

@fig-antennas shows the distribution of the three different technologies.
It seems like 2G is the most frequent one, which makes sense since it has been around the longest.
The 3G antennas are not quite as frequent, but also seem to go along some major roads.
For 4G technology, the antenna clusters seem to match the large cities which we can see in @fig-nightlights-zonal.

```{r}
#| label: load-cellid
here("input/opencellid_tanzania.RData") |> load()

open_cell <- opencellid_tanzania |> 
    # convert to sf 
  st_as_sf(coords = c("lon", "lat"),
           crs = 4326) |> 
  filter(created_year <= 2022) |> # complete years
  mutate(across(c(created, updated), as_datetime)) |> 
  mutate(created_year = year(created) |> as.integer(),
         create_month = month(created)) |> 
  # order 2G/3G/4G
  mutate(radio = factor(radio, 
                        levels = c("GSM", "UMTS", "LTE"), 
                        ordered = TRUE))|> 
  # add state and subset for only antennas within known states
  st_intersection(tanzania |> transmute(state = name)) 

two_g <- open_cell |> filter(radio == "GSM")
three_g <- open_cell |> filter(radio == "UMTS")
four_g <- open_cell |> filter(radio == "LTE")

```

```{r}
#| label: fig-antennas
#| fig-cap: Mobile network antennas in Tanzania

basemap +
  geom_sf(data = open_cell |> st_jitter(),
          size = .8,
          alpha = .4) +
  facet_wrap(~radio) +
  labs(caption = "Data: Open Cell ID")
```

## Lightnings

I include the lightning data I used last time.
Originally, it was a raster file, so this approach seems justified.
The data shows the average number of lightnings in 2014.
Lightnings may predict the probability or number of antennas in a raster cell because they make it more difficult to install antennas.
However, they are not induced by humans and should not have an impact on GDP, which makes them a good instrument for antennas.
We'd expect the coefficient to be negative, as more lightnings should make it more difficult to build antennas.

@fig-lightning shows the distribution of lightnings around Tanzania.
We can see some high-frequency clusters in the North and West, and some lower-frequency clusters toward the coast.

```{r}
#| label: load-lightning
here("input/lightnings_2014.rds") |> readRDS() |> 
  # only retain rasters for Tanzania
  st_intersection(tanzania_whole |> dplyr::select(geometry)) |> 
  dplyr::select(lightnings_mean_2014) |> 
  stars::st_rasterize() |> 
  write_stars(here("output/lightnings_tanzania.tif"))

lightning <- here("output/lightnings_tanzania.tif") |> 
  terra::rast() |> 
  # clip exact borders
  mask(tanzania_whole)
```

```{r}
#| label: fig-lightning
#| fig-cap: Lightning frequencies in Tanzania

basemap +
  geom_raster(data = lightning |> as.data.frame(xy = TRUE),
          aes(fill = lightnings_tanzania,
              x = x,
              y = y)) +
  labs(fill = "Average lightnings \nin 2014")

```

## Terrain ruggedness (TRI)

I download terrain ruggedness index (TRI) data from the [Harvard Dataverse](https://dataverse.harvard.edu/dataset.xhtml;jsessionid=f1ff7041fae2752fa64ab754bc0e?persistentId=doi%3A10.7910%2FDVN%2FWXUZBN&version=&q=&fileTypeGroupFacet=%22Document%22&fileAccess=&fileTag=&fileSortField=&fileSortOrder=#) [@carter].
Since the download link changes every time I added the downloaded folder to the input folder.
The resolution is similar to the nighttime lights.

The TRI indicates how much the altitude changes from one grid cell to the next.
If a grid cell is very high, but the surrounding cells are as well, the TRI will be low.
Only if a grid cell is very high, but (some of) its surrounding cells are low, will the TRI be high.
It is thus derived from the altitude, but not quite the same.
We'd expect a more rugged terrain to impede antenna installation, so TRI should negatively impact the probability or number of antennas in a grid cell.

@fig-zonal-tri shows the TRI distribution across Tanzania.
We can see that the states are quite different when it comes to ruggedness, with low ruggedness towards the coast and higher towards the North and West.
When considering the cell level, we can see that there are just a few cells with high ruggedness, which may indicate mountains (after all, the Kilimanjaro is in Tanzania).

```{r}
#| label: load-tri

# extract zip
if(!("tri_tanzania.tif" %in% (here("output") |> list.files()))) {
  archive_extract(here("input/dataverse_files.zip"),
                  here("output/tri"))
  
  # crop raster to Tanzania
  here("output/tri/Ruggedness_OneKilometerData/ruggedness1K.tif") |>
    raster::raster() |>
    raster::crop(tanzania_whole |> st_transform("ESRI:54010")) |>
    mask(tanzania_whole |> st_transform("ESRI:54010")) |>
    raster::writeRaster(here("output/tri_tanzania.tif"), overwrite = TRUE)
}

# read in
tri <- here("output/tri_tanzania.tif") |> 
  terra::rast() |> 
  terra::project("epsg:4326")

```

```{r}
#| label: fig-zonal-tri
#| layout-ncol: 2
#| fig-cap: TRI
#| fig-subcap:
#|    - for Tanzanian states
#|    - on grid level

tri_zonal <- zonal(tri, 
                   tanzania_vect, 
                   fun = "mean",
                   na.rm = TRUE)  |> 
  cbind(tanzania |> dplyr::select(name)) |> 
  st_as_sf()

basemap + 
  geom_sf(data = tri_zonal,
          aes(fill = tri_tanzania)) +
  labs(fill = "Terrain Ruggedness \nIndex",
       caption = "Data: Harvard Dataverse")

basemap +
  geom_raster(data = tri |> as.data.frame(xy = TRUE),
              aes(x = x,
                  y = y,
                  fill = tri_tanzania)) +
  labs(fill = "Terrain Ruggedness \nIndex",
       caption = "Data: Harvard Dataverse")
  
```

## Global Human Settlement Layer (GHSL)

The data for the Global Human Settlement Layer come from the European Commission.
I download them on a 250m grid with data from 2014.
This grid is more detailed than the baseline grid.
The GHSL value is an estimation of how present humans are within a grid, either through settling or using the area for production.

@fig-zonal-ghsl shows the distribution across Tanzania.
I show the log value, since the distribution is very uneven.
On the state level, we can see that this overlaps a lot with nighttime lights data: Dar es Salaam and Zanzibar-West have the hightest human presence.
When we consider the grid-level, we can can once more see the local hotspots, and also see that most of Tanzania is not settled.
Also, towards the North-East, there is a cluster with high settlement which did not appear in the nighttime lights data.

```{r}
#| label: download-ghsl

if (! ("ghsl.tif" %in% (here("output") |> list.files()))) {
  # download
  download.file("http://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_BUILT_LDSMT_GLOBE_R2015B/GHS_BUILT_LDS2014_GLOBE_R2016A_54009_250/V1-0/GHS_BUILT_LDS2014_GLOBE_R2016A_54009_250_v1_0.zip",
              destfile = here("output/ghsl.zip"))
  # extract
  archive_extract(here("output/ghsl.zip"),
                  here("output/ghsl"))
  # crop and save
  here("output/ghsl/GHS_BUILT_LDS2014_GLOBE_R2016A_54009_250_v1_0/GHS_BUILT_LDS2014_GLOBE_R2016A_54009_250_v1_0.tif") |> 
    raster::raster() |> 
    raster::crop(tanzania_whole |> st_transform("ESRI:54009")) |> 
    raster::mask(tanzania_whole |> st_transform("ESRI:54009")) |> 
    raster::writeRaster(here("output/ghsl.tif"), overwrite = TRUE)
} 
```

```{r}
#| label: load-ghsl

ghsl <- here("output/ghsl.tif") |> 
  terra::rast() |> 
  terra::project("epsg:4326")
```

```{r}
#| label: fig-zonal-ghsl
#| layout-ncol: 2
#| fig-cap: Zonal statistics for GHSL
#| fig-subcap: 
#|    - per state
#|    - per grid cell

ghsl_zonal <- ghsl |> 
  zonal(tanzania_vect, fun = "mean", na.rm = TRUE) |> 
  cbind(tanzania |> dplyr::select(name)) |> 
  st_as_sf()

basemap +
  geom_sf(data = ghsl_zonal,
          aes(fill = log(ghsl + 0.000001))) +
  labs(fill = "log Global Human \nSettlement Layer",
       caption = "Data: European Commission")

basemap + 
  geom_raster(data = ghsl |> as.data.frame(xy = TRUE),
              aes(x = x,
                  y = y,
                  fill = log(ghsl + 0.000001))) +
    labs(fill = "log Global Human \nSettlement Layer",
       caption = "Data: European Commission")

```

# Aggregating data on nighttime light grid level

I use the nighttime light grid as a baseline grid.
To calculate the overlap with the other data sets, I convert it from raster to an `sf` data frame.
This makes it easier to calculate the overlap; additionally, for the regression, I need a data frame.

To determine the state in which a grid cell lies, I use the `sf` methd `intersects`.
From this, I can determine in most cases the one state in which this grid cell lies.
In some cases, there are two or three states; I assign the value `multiple states` to these cases.
In some cases, there is no state; then, I assign the value `none`.

To determine if there is an antenna on the grid, I intersect the antenna point layer with this baseline grid.
I use the function `zonal` from the `terra` package [@terra] to aggregate all other raster data on this level.
I use the mean and ignore `NA`s.

@tbl-one shows the summary statistics for the aggregated data set.
We can see that relatively few values are missing, and only for lightnings and TRI. 
This is probably because the raster layers do not align perfectly, and thus some of the finer-coarsed nighttime lights raster grid cells are in areas lightnings and TRI simply do not cover.
We can also see thatt the distributions of all variables are quite left-skewed: many low values, and some high outliers.
This is especially true for the number of antennas.

```{r}
#| label: add-state-to-nightlights

if (!"nightlights_sf_w_state.rds" %in% (here("output") |> list.files())) {
  # intersect first
  nightlights_state_intersection <- nightlights_sf |>  
    st_intersects(tanzania |> dplyr::select(name))
  
  # figure out number of overlapping states, and pull out first
  overlap_state_number <- nightlights_state_intersection %>% lengths()
  overlap_first <- sapply(nightlights_state_intersection, first, default = NA)
  
  # determine the final state
  nightlights_state <- data.frame(state_number_first_overlap = overlap_first,
                                  number_states = overlap_state_number) |>
    mutate(
      state = case_when(
        number_states == 0 ~ "none",
        number_states == 1 ~ tanzania$name[state_number_first_overlap],
        number_states > 1 ~ "multiple states"
      )
    ) |>
    mutate(state = labelled(state, label = "State name"))
  
  
  saveRDS(nightlights_state,
          here("output/nightlights_states.rds"))
} else {
  nightlights_state <-
    here("output/nightlights_states.rds") |> readRDS()
}

```

```{r}
#| label: count-antennas-per-grid-cell

if (!("ntl_antennas_vector.rds" %in% (here("output") |> list.files()))) {
  ntl_antennas <- st_intersects(nightlights_sf, open_cell)
  
  ntl_antennas_vector <- ntl_antennas %>% lengths
  
  saveRDS(ntl_antennas,
          here("output/ntl_antennas_sgbp.rds"))
  saveRDS(ntl_antennas_vector,
          here("output/ntl_antennas_vector.rds"))
} else {
  ntl_antennas_vector <-
    here("output/ntl_antennas_vector.rds") |> readRDS()
}

# per technology
if (! all(c("ntl_two_g.rds", "ntl_three_g.rds", "ntl_four_g.rds") %in%
          (here("output") |> list.files()))) {
  
ntl_two_g <- st_intersects(nightlights_sf, two_g) %>% lengths
ntl_three_g <- st_intersects(nightlights_sf, three_g) %>% lengths
ntl_four_g <- st_intersects(nightlights_sf, four_g) %>% lengths

saveRDS(ntl_two_g, here("output/ntl_two_g.rds"))
saveRDS(ntl_three_g, here("output/ntl_three_g.rds"))
saveRDS(ntl_four_g, here("output/ntl_four_g.rds"))
} else {
  ntl_two_g <- here("output/ntl_two_g.rds") |> readRDS()
  ntl_three_g <- here("output/ntl_three_g.rds") |> readRDS()
  ntl_four_g <- here("output/ntl_four_g.rds") |> readRDS()
}

```

```{r}
#| label: calculate-ntl-zonal-statistics

if (! "ntl_lightnings_zonal.rds" %in% (here("output") |> list.files())) {
  ntl_lightnings_zonal <- zonal(lightning,
                                nightlights_vect,
                                fun = "mean",
                                na.rm = TRUE)
  saveRDS(ntl_lightnings_zonal,
          here("output/ntl_lightnings_zonal.rds"))
} else {
  ntl_lightnings_zonal <- here("output/ntl_lightnings_zonal.rds") |> readRDS()
}

```

```{r}
#| label: calculate-tri-zonal-statistics

if (! "ntl_tri_zonal.rds" %in% (here("output") |> list.files())) {
  ntl_tri_zonal <- zonal(tri,
                                nightlights_vect,
                                fun = "mean", na.rm = TRUE)
  
  saveRDS(ntl_tri_zonal,
          here("output/ntl_tri_zonal.rds"))
  
} else {
  ntl_tri_zonal <-
    here("output/ntl_tri_zonal.rds") |> readRDS()
}
```

```{r}
#| label: calculate-ghsl-zonal-statistics

if (! "ntl_ghsl_zonal.rds" %in% (here("output") |> list.files())) {
  ntl_ghsl_zonal <- zonal(ghsl,
                                 nightlights_vect,
                                 fun = "mean", na.rm = TRUE)
  
  saveRDS(ntl_ghsl_zonal,
          here("output/ntl_ghsl_zonal.rds"))
} else {
  ntl_ghsl_zonal <- here("output/ntl_ghsl_zonal.rds") |> readRDS()
}
```

```{r}
#| label: add-lat-lon

if (! "centroids.rds" %in% (here("output") |> list.files())) {
  
# add an x and y coordinate variable for Conley SE
centroids <- nightlights_sf |> 
  dplyr::select(geometry) |> 
  st_as_sf() |> 
  st_centroid() |> 
  st_coordinates() |> 
  as.data.frame() |> 
  rename(lat = X,
         lon = Y)

saveRDS(centroids,
        here("output/centroids.rds"))
} else {
  centroids <- here("output/centroids.rds") |> readRDS()
}

```

```{r}
#| label: gather-statistics

data <- nightlights_sf |>
  cbind(nightlights_state |> dplyr::select(state)) |> 
  cbind(ntl_lightnings_zonal) |>
  cbind(ntl_tri_zonal) |>
  cbind(ntl_ghsl_zonal) |>
  cbind(centroids) |> 
  # add pretty labels
  mutate(
    DN_NTL_2021 = labelled(DN_NTL_2021, label = "Mean night time lights"),
    lightnings_tanzania = labelled(lightnings_tanzania,   
                                   label = "Mean number of lightnings"),
    tri_tanzania = labelled(tri_tanzania, label = "Mean TRI"),
    ghsl = labelled(ghsl, label = "Mean GHSL")
  ) |>
  # add antenna info
  mutate(number_antennas = labelled(ntl_antennas_vector,
                                    label = "Number of antennas"),
         log_number_antennas = log(ntl_antennas_vector + 1e-6)) |>
  mutate(
    number_2g = labelled(ntl_two_g, label = "Number of 2G antennas"),
    number_3g = labelled(ntl_three_g, label = "Number of 3G antennas"),
    number_4g = labelled(ntl_four_g, label = "Number of 4G antennas"),
    any_2g = labelled(as.integer(ntl_two_g > 0), label = "Any 2G antenna"),
    any_3g = labelled(as.integer(ntl_three_g > 0), label = "Any 3G antenna"),
    any_4g = labelled(as.integer(ntl_four_g > 0), label = "Any 4G antenna"),
  ) 

```

```{r}
#| label: tbl-one
#| tbl-cap: Summary statistics

selected_cols <- data |> 
  as.data.frame() |> 
  dplyr::select(-geometry, -lon, -lat, -state, -log_number_antennas) |> 
  names()

# prepare histogram sparklines
tmp_list <- data |> 
  as.data.frame() |> 
  dplyr::select(all_of(selected_cols)) |>
  lapply(na.omit) |> 
  lapply(scale)

# formatting things
emptycol <- function(x) " "
f <- function(x) format(round(x, 2), big.mark=",")
# formula
formula_summary <- paste(
  paste(paste0(selected_cols), collapse = "+"), 
  '~ N + Mean + SD + Median + Min + Max + Heading("Histogram") * emptycol'
  )

datasummary(formula = as.formula(formula_summary),
            data = data,
            format = f,
            output = "data.frame",
            notes = "Unit of observation: Nighttime lights grid cell") |> 
  kbl(booktabs = TRUE,
      align = c("l", rep("r", 6), "c")) |> 
  column_spec(column = 8, image = spec_hist(tmp_list)) |> 
  pack_rows("Explanatory variables", 1, 4) |> 
  pack_rows("Dependent variables", 5, 11)
```

It's worth taking a moment to analyse the antennas per grid cell.
As @fig-raster-antennas shows, many grid cells have no antenna; a few have many, with a maximum of `r data$number_antennas |> max()`.
However, the grid cells with the many antennas align with the pattern we have seen in @fig-antennas, so that can easily be explained.

```{r}
#| eval: true 
#| label: fig-raster-antennas
#| layout-ncol: 2
#| fig-cap: "Antennas per grid cell"
#| fig-subcap: 
#|   - "Histogram"
#|   - "Map"

number_antennas_raster <- data |> 
  dplyr::select(log_number_antennas) |> 
  st_rasterize() |> 
  as.data.frame(xy = TRUE)

ggplot() +
  geom_histogram(data = data,
            aes(x = number_antennas),
            bins = 50) +
  scale_y_continuous(trans = scales::pseudo_log_trans()) +
  theme_minimal() +
  labs(x = "Log number of antennas per grid cell")

basemap +
  geom_raster(data = number_antennas_raster,
              aes(x = x,
                  y = y,
                  fill = log_number_antennas)) +
  scale_fill_continuous(na.value = NA) +
  labs(fill = "Log number of antennas")
```

# Regressions

I use the data aggregated in previous steps to run regressions.
With these, I want to estimate the impact of my explanatory variables on the probability/number of antennas in a grid cell. 

In run seperate regressions for each technology.
Within each technology, I use two different dependent variables:

-   any antenna in grid cell
-   number of antennas per grid cell

The first specification is due to the wording in the homework assignment; the second is because I noticed some cells with much larger values than 1.
The independent variables are the variables I calculated in the previous section:

-   mean night time lights
-   mean number of lightnings
-   mean TRI
-   mean GHSL

For each of these dependent variables, I run the following regressions:

1.  *baseline:* a simple ordinary least squares regression (OLS)
2.  *fixed effects (FE)*: a simple OLS with FE on the state level, and accordingly clustered standard errors
3.  *HAC standard errors:* as 2., but with standard errors accounting for heteroscedasticity.

I also considered using *Conley standard errors*.
However, the regressions took too long to run.
If of interest, it can however be run in the cells `run-regression-2g` to `run-regression-4g` by adding the following argument to the function `run_regressions`: `conley = TRUE`.

I decide against using an instrumental variables (IV) approach.
This is because while lightning strikes are an instrument for mobile antennas, mobile antennas in this case are the dependent variable.
However, the IV approach is only used when there is an endogenous explanatory variable.
Since this is not the case, and I do not know of any further endogeneity issues or how to solve them through IV, I do not employ an IV strategy.

```{r}
#| label: declare-explanatory-vals

explanatory_vals <- c("DN_NTL_2021", 
                      "lightnings_tanzania", 
                      "tri_tanzania", 
                      "ghsl")
```

## 2G (GMS)

In the first set of regressions, I consider 2G antennas, i.e. the earliest ones.
As seen in @fig-antennas, this type of antenna is the most frequent one.
With this type of antenna, we should be able to see how the government chooses spots for early and basic provision.

@tbl-regression-2g shows the regression results.
We can see that the explanatory power is not terrible: $R^2$ lies is around 10--20%, even without fixed effects.
Interestingly, adding fixed effects on the state level does not increase the explanatory power by a lot. 
Presumably, the state borders do not tell us a lot about where antennas are built.

Almost all coefficients are highly significant ($p < 0.001$).
The only exception is the lighntings variable, where significance disappears when clustering standard errors by state and using FE on the same level.
For almost all variables, the coefficients go in the expected direction: night lights and GHSL increase the number/probability of 2G antennas, lightnings decrease them.
Only the TRI has an impact close to 0.
This may be because the distribution is heavily left-skewed; in a future work, one could try logging the variable and considering the results again.

When comparing the two panels -- any antenna vs. number of antennas -- we do not see differences in the significance or the signs, but only in the magnitude of the coefficients.
This makes sense, since we are not talking about probabilities anymore, but about numbers. 
In almost all cases, the coefficients quintuple.


```{r}
#| label: run-regression-2g

reg_bin_2g <- run_regressions("any_2g")
reg_2g <- run_regressions("number_2g")
```

```{r}
#| label: tbl-regression-2g
#| tbl-cap: Regression results for 2G antennas

list(
  "Dependent variable: any 2G antenna" = reg_bin_2g,
  "Dependent variable: number of 2G antennas" = reg_2g
) |>
  show_regressions(regression_list = _)

```

## 3G (UMTS)

The results for the next technology are shown in @tbl-regressions-3g.
They do not differ much from the results for 2G antennas.
Coefficients have a similar significance and the signs are equal.
Only the coefficient magnitude for the number of 3G antennas is larger than for 2G antennas.
Apparently, more antennas are built now in those areas with high settlement, and even less in more difficult areas (i.e. with more lightnings).
The barely noticeable impact of TRI continues.

```{r}
#| label: run-regressions-3g

reg_bin_3g <- run_regressions("any_3g")
reg_3g <- run_regressions("number_3g")

```

```{r}
#| label: tbl-regressions-3g
#| tbl-cap: Regression results for 3G antennas

list(
  "Dependent variable: any 3G antenna" = reg_bin_3g,
  "Dependent variable: number of 3G antennas" = reg_3g
) |>
  show_regressions(regression_list = _)
```

## 4G (LTE)

Lastly, I analyze 4G antennas. 
This is the most recent technology.
Interestingly, results change a bit compared to 2G and 3G.

When clustering standard errors at state level and applying state FE, barely any coefficients are significant anymore. 
This may imply that for 4G, the state actually is important, indicating that the distribution policy differs from the earlier technologies.
However, looking at @fig-antennas again, this may also be due to the heavy clustering in Dar es Salaam and on Zanzibar.

Additionally, night time lights have barely any effect anymore, but the GHSL continues to impact both number and probability of antennas per grid cell: if the GHSL value increases by 1, the probability of any antenna increases by 20.5%, and the number of antennas increases by .7.

However, the TRI continues to have a signifcant, close-to-zero impact.
Lighntings also continue to have a highly significant, negative impact on the number and probability of antennas per grid cell. 


```{r}
#| label: run-regressions-4g
reg_bin_4g <- run_regressions("any_4g")
reg_4g <- run_regressions("number_4g")
```

```{r}
#| label: tbl-regressions-4g
#| tbl-cap: Regression results for 4G antennas

list(
  "Dependent variable: any 4G antenna" = reg_bin_4g,
  "Dependent variable: number of 4G antennas" = reg_4g
) |>
  show_regressions(regression_list = _)
```

# Discussion and conclusion

In this report, I have considered variables that explain whether antennas are built in a certain area in Tanzania.
For this, I distinguished between three antenna technologies: 2G, 3G, and 4G.

I find that 4G differs from the other two technologies, in that higher night lights intensity barely increases the probability and number of antenna per grid cell, which it did for 2G and 3G antennas. 
Also, the state FE becomes more relevant for 4G antennas. 
This indicates that the selection process for 4G antennas differs from the earlier technologies.

I also find that 2G and 3G antennas differ a bit, since GHSL impacts the number of antennas per grid cell differently. 
While it is important for both technologies, the coefficient for GHSL doubles from 2G to 3G, implying that it becomes a more driving factor.

Overall, TRI has a significant, but very low impact.
Night lights have a significant, but it is also low, especially for 4G antennas.
The mean number of lightnings has a quite consistently significant negative impact on both probability and number of antennas per grid cell. 
However, when clustering standard errors by state and adding state FE, the significance disappears.

It thus seems that we've found important drivers for building mobile antennas: 

-   night lights
-   number lightnings
-   GHSL
-   and, to some extent, TRI.

{{< pagebreak >}}

# References {.unnumbered}
